// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

use expect_test::expect;
use std::fs::File;
use std::io::Read;
use std::path::Path;

use crate::compiled_package::BuildConfig;

#[test]
fn generate_struct_layouts() {
    // build the Sui framework and generate struct layouts to make sure nothing crashes
    let mut path = Path::new(env!("CARGO_MANIFEST_DIR"))
        .parent()
        .unwrap()
        .to_path_buf();
    path.push("sui-framework");
    let pkg = BuildConfig::new_for_testing().build(path).unwrap();
    let registry = pkg.generate_struct_layouts();
    // check for a couple of types that aren't likely to go away
    assert!(registry.contains_key("0000000000000000000000000000000000000001::string::String"));
    assert!(registry.contains_key("0000000000000000000000000000000000000002::object::UID"));
    assert!(
        registry.contains_key("0000000000000000000000000000000000000002::tx_context::TxContext")
    );
}

#[test]
fn generate_lock_file() {
    let mut path = Path::new(env!("CARGO_MANIFEST_DIR"))
        .parent()
        .unwrap()
        .to_path_buf();
    path.push("sui-framework");
    let lock_file_path = path.join("Move.lock");
    let build_config = BuildConfig::new_for_testing();
    let mut build_config = build_config;
    build_config.config.lock_file = Some(lock_file_path.clone());
    build_config.build(path).unwrap();

    let mut lock_file = File::open(lock_file_path.clone()).expect("No Move.lock file");
    let mut lock_file_contents = String::new();
    lock_file
        .read_to_string(&mut lock_file_contents)
        .expect("Error reading Move.lock file");

    let expected = expect![[r##"
        # @generated by Move, please check-in and do not edit manually.

        [move]
        version = 0

        dependencies = [
          { name = "MoveStdlib" },
        ]

        [[move.package]]
        name = "MoveStdlib"
        source = { local = "deps/move-stdlib" }
    "##]];
    expected.assert_eq(lock_file_contents.as_str());

    std::fs::remove_file(lock_file_path).unwrap();
}
